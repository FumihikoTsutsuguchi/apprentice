{"ast":null,"code":"var _jsxFileName = \"/Users/tsutsuguchifumihiko/apprentice/quest_react/quest/05_state_and_event/src/020_useState/start/Example.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n//eventLisnerの練習\n// const Example = () => {\n//   let [val, setVal] = useState();\n//   return (\n//     <>\n//       <input\n//       type=\"text\"\n//       onChange={(e) => {\n//         setVal(e.target.value)\n//       }} /> = {val}\n//     </>\n//   );\n// };\n\n// export default Example;\n\n//[QUEST10]1. state の追加\n// const CounterApp = () => {\n//   let stateAndSetter = useState(0);\n//   const count = stateAndSetter[0]; // 現在の状態\n//   const setCount = stateAndSetter[1]; // 更新関数\n//   return (\n//     <>\n//       <div>\n//         <h2>カウンターアプリ</h2>\n//         <h1>カウンター: {count}</h1>\n//         <button\n//           type=\"button\"\n//           onClick={() => setCount(prevCount => prevCount + 1)}\n//         >増加</button>\n//         <button\n//           type=\"button\"\n//           onClick={() => setCount(prevCount => prevCount - 1)}\n//         >減少</button>\n//       </div>\n//     </>\n//   );\n// };\n// export default CounterApp;\n\n// [QUEST10]4. 複数回のstateの更新をキューに入れる\n// const Example = () => {\n//   const [count, setCount] = useState(0);\n//   const countUp = () => {\n//     setCount(count + 1);\n//     setCount(prevState => prevState + 1);\n//     console.log(count);\n//   }\n//   const countDown = () => {\n//     setCount(count - 1);\n//   }\n//   return (\n//     <>\n//       <p>現在のカウント数：{count}</p>\n//       <button\n//       onClick={countUp}\n//       >+</button>\n//       <button\n//       onClick={countDown}\n//       >-</button>\n//     </>\n//   );\n// }\n// export default Example;\n\n// [QUEST10]5. state内のオブジェクトの更新\n\n// export default function UserInfoApp() {\n//   const [userInfo, setUserInfo] = useState({ name: '大介', age: 25 });\n\n//   console.log(userInfo);\n\n//   function updateName() {\n//     console.log(userInfo.name);\n//     setUserInfo({name: '太一', age: 25});\n//   }\n\n//   return (\n//     <div>\n//       <h2>ユーザー情報アプリ</h2>\n//       <p>名前: {userInfo.name}</p>\n//       <p>年齢: {userInfo.age}</p>\n//       <button onClick={updateName}>名前を太一に変更</button>\n//     </div>\n//   );\n// }\n\n// [QUEST10]6. state内の配列の更新\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserInfoApp() {\n  _s();\n  const [userInfo, setUserInfo] = useState({\n    name: '大介',\n    age: 25\n  });\n  const [hobbies, setHobbies] = useState(['読書', '映画鑑賞']);\n  function updateName() {\n    // これはReactのベストプラクティスに反する更新方法\n    // userInfo.name = '太一';\n    // setUserInfo(userInfo);／\n  }\n  function addHobby() {\n    // 不正な更新方法：配列を直接変更\n    hobbies.push('新しい趣味');\n    setHobbies(hobbies);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30E6\\u30FC\\u30B6\\u30FC\\u60C5\\u5831\\u30A2\\u30D7\\u30EA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u540D\\u524D: \", userInfo.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u5E74\\u9F62: \", userInfo.age]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateName,\n        children: \"\\u540D\\u524D\\u3092\\u592A\\u4E00\\u306B\\u5909\\u66F4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u8DA3\\u5473\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: hobbies.map((hobby, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: hobby\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addHobby,\n        children: \"\\u8DA3\\u5473\\u3092\\u8FFD\\u52A0\\uFF08\\u4E0D\\u6B63\\u306A\\u65B9\\u6CD5\\uFF09\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(UserInfoApp, \"vpoVnWFw+5YExq45bZQdLoIkbyg=\");\n_c = UserInfoApp;\nvar _c;\n$RefreshReg$(_c, \"UserInfoApp\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","UserInfoApp","_s","userInfo","setUserInfo","name","age","hobbies","setHobbies","updateName","addHobby","push","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","hobby","index","_c","$RefreshReg$"],"sources":["/Users/tsutsuguchifumihiko/apprentice/quest_react/quest/05_state_and_event/src/020_useState/start/Example.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n//eventLisnerの練習\r\n// const Example = () => {\r\n//   let [val, setVal] = useState();\r\n//   return (\r\n//     <>\r\n//       <input\r\n//       type=\"text\"\r\n//       onChange={(e) => {\r\n//         setVal(e.target.value)\r\n//       }} /> = {val}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Example;\r\n\r\n//[QUEST10]1. state の追加\r\n// const CounterApp = () => {\r\n//   let stateAndSetter = useState(0);\r\n//   const count = stateAndSetter[0]; // 現在の状態\r\n//   const setCount = stateAndSetter[1]; // 更新関数\r\n//   return (\r\n//     <>\r\n//       <div>\r\n//         <h2>カウンターアプリ</h2>\r\n//         <h1>カウンター: {count}</h1>\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={() => setCount(prevCount => prevCount + 1)}\r\n//         >増加</button>\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={() => setCount(prevCount => prevCount - 1)}\r\n//         >減少</button>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n// export default CounterApp;\r\n\r\n// [QUEST10]4. 複数回のstateの更新をキューに入れる\r\n// const Example = () => {\r\n//   const [count, setCount] = useState(0);\r\n//   const countUp = () => {\r\n//     setCount(count + 1);\r\n//     setCount(prevState => prevState + 1);\r\n//     console.log(count);\r\n//   }\r\n//   const countDown = () => {\r\n//     setCount(count - 1);\r\n//   }\r\n//   return (\r\n//     <>\r\n//       <p>現在のカウント数：{count}</p>\r\n//       <button\r\n//       onClick={countUp}\r\n//       >+</button>\r\n//       <button\r\n//       onClick={countDown}\r\n//       >-</button>\r\n//     </>\r\n//   );\r\n// }\r\n// export default Example;\r\n\r\n// [QUEST10]5. state内のオブジェクトの更新\r\n\r\n// export default function UserInfoApp() {\r\n//   const [userInfo, setUserInfo] = useState({ name: '大介', age: 25 });\r\n\r\n//   console.log(userInfo);\r\n\r\n//   function updateName() {\r\n//     console.log(userInfo.name);\r\n//     setUserInfo({name: '太一', age: 25});\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>ユーザー情報アプリ</h2>\r\n//       <p>名前: {userInfo.name}</p>\r\n//       <p>年齢: {userInfo.age}</p>\r\n//       <button onClick={updateName}>名前を太一に変更</button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// [QUEST10]6. state内の配列の更新\r\nexport default function UserInfoApp() {\r\n  const [userInfo, setUserInfo] = useState({ name: '大介', age: 25 });\r\n  const [hobbies, setHobbies] = useState(['読書', '映画鑑賞']);\r\n\r\n  function updateName() {\r\n    // これはReactのベストプラクティスに反する更新方法\r\n    // userInfo.name = '太一';\r\n    // setUserInfo(userInfo);／\r\n  }\r\n\r\n  function addHobby() {\r\n    // 不正な更新方法：配列を直接変更\r\n    hobbies.push('新しい趣味');\r\n    setHobbies(hobbies);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>ユーザー情報アプリ</h2>\r\n        <p>名前: {userInfo.name}</p>\r\n        <p>年齢: {userInfo.age}</p>\r\n        <button onClick={updateName}>名前を太一に変更</button>\r\n      </div>\r\n      <div>\r\n        <h3>趣味</h3>\r\n        <ul>\r\n          {hobbies.map((hobby, index) => (\r\n              <li key={index}>{hobby}</li>\r\n          ))}\r\n        </ul>\r\n        <button onClick={addHobby}>趣味を追加（不正な方法）</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}